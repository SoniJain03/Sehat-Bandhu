# -*- coding: utf-8 -*-
"""Hospital recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mdjtaBcauy3YagJSAswpfniyIEwOq20J
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import math

# Load dataset
df_raw = pd.read_csv("hospital_directory.csv")

# Step 1: Keep only useful columns
keep_cols = [
    'State', 'District', 'Hospital_Name', 'Hospital_Category',
    'Hospital_Care_Type', 'Discipline_Systems_of_Medicine',
    'Specialties', 'Facilities', 'Telephone', 'Mobile_Number',
    'Emergency_Num', 'Website', 'Pincode', 'Address'
]
df = df_raw[[c for c in keep_cols if c in df_raw.columns]]

# Step 2: Replace invalid values with NaN
df = df.replace(["0", 0, "NA", "NaN", "-", "Not Available"], np.nan)

# Step 3: Filter only Kerala hospitals
df = df[df['State'].str.contains("Kerala", case=False, na=False)]

# Step 4: Clean text columns
text_cols = ['Hospital_Name', 'Hospital_Category', 'Hospital_Care_Type',
             'Discipline_Systems_of_Medicine', 'Specialties', 'Facilities',
             'Address', 'District']
for col in text_cols:
    if col in df.columns:
        df[col] = df[col].fillna("").astype(str).str.strip()

# Step 5: Fix Specialties (fallback to hospital name if missing)
df['Specialties'] = df.apply(
    lambda r: r['Specialties'] if r['Specialties'] not in ["", "Unknown", "nan", ""] else r['Hospital_Name'],
    axis=1
)

# Step 6: Clean Facilities
df['Facilities'] = df['Facilities'].fillna("").astype(str).str.strip()

# Step 7: Add enrichment fields
df['Languages'] = "Malayalam, English"
df['Cost_Category'] = df['Hospital_Category'].apply(
    lambda x: "Free/Low Cost" if isinstance(x, str) and "Government" in x else "Paid/Private"
)
df['Supports_Immigrants'] = "Yes"

# Step 8: Save final cleaned dataset
df.to_csv("kerala_hospitals_cleaned_final.csv", index=False)

print("Cleaned dataset saved as kerala_hospitals_cleaned_final.csv")
print("Shape:", df.shape)
df.head()

# Create TF-IDF matrix on Specialties
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['Specialties'])

# Compute similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

print("TF-IDF Matrix Shape:", tfidf_matrix.shape)

def recommend_hospitals(specialty_query, district=None, cost_pref=None, top_n=10):
    """
    Recommend hospitals in Kerala based on specialty, district and cost preference.
    """
    # Vectorize the user query
    query_vec = tfidf.transform([specialty_query])
    sim_scores = cosine_similarity(query_vec, tfidf_matrix).flatten()

    # Attach similarity scores
    df['similarity'] = sim_scores
    results = df.copy()

    # Apply district filter if given
    if district:
        results = results[results['District'].str.contains(district, case=False, na=False)]

    # Apply cost filter if given
    if cost_pref:
        results = results[results['Cost_Category'].str.contains(cost_pref, case=False, na=False)]

    # Sort by similarity score
    results = results.sort_values(by='similarity', ascending=False)

    return results[['Hospital_Name', 'District', 'Specialties',
                    'Cost_Category', 'Languages',
                    'Supports_Immigrants', 'similarity']].head(top_n)

# Example queries
recommend_hospitals("cardiology", district="Kochi", cost_pref="Low")
recommend_hospitals("pediatrics", top_n=5)

# Example: Search for Cardiology hospitals in Ernakulam
results = recommend_hospitals("Cardiology", district="Ernakulam", cost_pref="Paid/Private", top_n=5)
results

# Just specialty search
results = recommend_hospitals("Pediatrics", top_n=5)
results

# Partial specialty name
results = recommend_hospitals("Cardio", top_n=5)
results

# Specialty that doesn’t exist
results = recommend_hospitals("Dermatology", district="Kochi", top_n=5)
results

results = recommend_hospitals("Cardiology", top_n=10)
results = results[results['Supports_Immigrants'] == 'Yes']
results

# =========================
# Step 5: Test Hospital Recommendation System
# =========================

# 1️⃣ Test 1: Specialty + District + Cost
print("Test 1: Cardiology hospitals in Ernakulam, Paid/Private")
results1 = recommend_hospitals("Cardiology", district="Ernakulam", cost_pref="Paid/Private", top_n=5)
print(results1, "\n\n")

# 2️⃣ Test 2: Specialty only
print("Test 2: Pediatrics hospitals, no district or cost filter")
results2 = recommend_hospitals("Pediatrics", top_n=5)
print(results2, "\n\n")

# 3️⃣ Test 3: Partial specialty match
print("Test 3: Partial match for 'Cardio'")
results3 = recommend_hospitals("Cardio", top_n=5)
print(results3, "\n\n")

# 4️⃣ Test 4: Specialty that may not exist
print("Test 4: Non-existent specialty 'Dermatology'")
results4 = recommend_hospitals("Dermatology", district="Kochi", top_n=5)
print(results4, "\n\n")

# 5️⃣ Test 5: Filter by immigrant support
print("Test 5: Cardiology hospitals that support immigrants")
results5 = recommend_hospitals("Cardiology", top_n=10)
results5 = results5[results5['Supports_Immigrants'] == 'Yes']
print(results5, "\n\n")

import pandas as pd

class HospitalRecommender:
    def __init__(self, csv_path="hospital_data_cleaned.csv"):
        # Load dataset once when object is created
        self.hospital_df = pd.read_csv(csv_path)

    def recommend(self, specialty=None, district=None, cost=None, top_n=5):
        df = self.hospital_df.copy()

        # Apply filters
        if specialty:
            df = df[df["Specialty"].str.contains(specialty, case=False, na=False)]
        if district:
            df = df[df["District"].str.contains(district, case=False, na=False)]
        if cost:
            df = df[df["Cost_Preference"].str.contains(cost, case=False, na=False)]

        return df.head(top_n)

# =========================
# Interactive Hospital Recommendation
# =========================

# Get user inputs
specialty_query = input("Enter the specialty you are looking for: ")
district = input("Enter the district (press Enter to skip): ")
cost_pref = input("Enter cost preference (Low/Medium/High, press Enter to skip): ")
top_n_input = input("Enter number of recommendations you want (default 5): ")

# Validate top_n
try:
    top_n = int(top_n_input)
except:
    top_n = 5  # default if input is invalid

# Handle empty strings as None
district = district if district.strip() != "" else None
cost_pref = cost_pref if cost_pref.strip() != "" else None

# Get recommendations
results = recommend_hospitals(specialty_query, district=district, cost_pref=cost_pref, top_n=top_n)

# Display results
if results.empty:
    print("\nNo hospitals found matching your query.")
else:
    print("\nTop recommended hospitals:\n")
    print(results)

import pickle

# Initialize recommender
recommender = HospitalRecommender("/content/kerala_hospitals_cleaned_final.csv")

# Save as pickle
with open("hospital_recommender.pkl", "wb") as f:
    pickle.dump(recommender, f)

print("Hospital recommender model saved as hospital_recommender.pkl")


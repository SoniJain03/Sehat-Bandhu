# -*- coding: utf-8 -*-
"""NLP_based_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yXCas9jsFDPLwUPV2O703FrnPF_qFfps
"""

!pip install pandas scikit-learn joblib deep-translator

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import joblib
from deep_translator import GoogleTranslator

# Load dataset
df = pd.read_csv("india_kerala_expanded_symptoms_top30cols.csv")

# Preview
df.head()

# List of symptom columns (exclude target column 'diseases')
symptom_cols = df.columns[:-1]  # assuming last column is 'diseases'

# Function to convert row to sentence
def row_to_text(row):
    present = [symptom for symptom in symptom_cols if row[symptom]==1]
    text = "Patient has " + ", ".join(present) if present else "No symptoms"
    return text

# Apply conversion
df["symptom_text"] = df.apply(row_to_text, axis=1)

# Keep only text + target column
df_text = df[["symptom_text", "diseases"]]
df_text.head()

X = df_text["symptom_text"]
y = df_text["diseases"]  # updated column name

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Train size:", len(X_train))
print("Test size:", len(X_test))

tfidf = TfidfVectorizer(max_features=5000)  # you can tune max_features
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

print("TF-IDF shape:", X_train_tfidf.shape)

#Train logistic regression model
lr_model = LogisticRegression(max_iter=500)
lr_model.fit(X_train_tfidf, y_train)

# Save model and vectorizer
joblib.dump(lr_model, "nlp_disease_model.pkl")
joblib.dump(tfidf, "nlp_vectorizer.pkl")

y_pred = lr_model.predict(X_test_tfidf)

print("Classification Report:\n")
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Predict on test set
y_pred = lr_model.predict(X_test_tfidf)

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred, labels=lr_model.classes_)

# Plot heatmap
plt.figure(figsize=(12,10))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=lr_model.classes_,
            yticklabels=lr_model.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

from deep_translator import GoogleTranslator
import joblib

# Load trained model & vectorizer
lr_model = joblib.load("nlp_disease_model.pkl")
tfidf = joblib.load("nlp_vectorizer.pkl")

# List of known symptoms (top 30 columns from dataset)
symptom_vocab = [col.lower() for col in df.columns[:-1]]  # all symptom columns

# Initialize translator
translator = GoogleTranslator()

def normalize_and_sort_symptoms(text):
    """
    Keep only known symptoms and sort alphabetically.
    """
    text = text.lower()
    text = text.replace(" and ", ", ").replace(" with ", ", ")
    words = [w.strip() for w in text.split(",")]
    filtered = sorted([w for w in words if w in symptom_vocab])
    return "Patient has " + ", ".join(filtered) if filtered else "No symptoms"

def predict_nlp_disease(user_text, language="auto"):
    """
    Predict disease from symptoms text (English or Malayalam).

    Parameters:
    user_text: str, symptoms text in English or Malayalam
    language: 'en', 'ml', or 'auto'

    Returns:
    disease name (English or Malayalam)
    """
    # Step 1: Translate Malayalam to English if needed
    if language=="ml":
        text_en = translator.translate(user_text, source='ml', target='en')
    else:
        text_en = user_text

    # Step 2: Normalize & filter symptoms, then sort
    text_norm = normalize_and_sort_symptoms(text_en)

    # Step 3: Vectorize
    X_input = tfidf.transform([text_norm])

    # Step 4: Predict disease
    pred = lr_model.predict(X_input)[0]

    # Step 5: Translate back to Malayalam if needed
    if language=="ml":
        pred = translator.translate(pred, source='en', target='ml')

    return pred

# English input
english_input = "sore throat, dizziness"
print("English input prediction:", predict_nlp_disease(english_input, language="en"))

# Malayalam input
malayalam_input = "തൊണ്ടവേദന, തലകറക്കം"
print("Malayalam input prediction:", predict_nlp_disease(malayalam_input, language="ml"))

